{\rtf1\ansi\uc0\deff0{\fonttbl{\f0\fmodern\fprq1\fcharset0;}}{\colortbl;\red136\green136\blue136;\red186\green33\blue33;\red0\green68\blue221;\red102\green102\blue102;\red64\green128\blue128;\red160\green160\blue0;\red25\green23\blue124;\red0\green128\blue0;\red187\green102\blue136;\red187\green102\blue34;\red136\green0\blue0;\red170\green34\blue255;\red153\green153\blue153;\red0\green160\blue0;\red160\green0\blue0;\red255\green0\blue0;\red128\green0\blue128;\red176\green0\blue64;\red0\green0\blue255;\red187\green187\blue187;\red188\green122\blue0;\red0\green0\blue128;\red125\green144\blue41;\red210\green65\blue58;}\f0 {\cf21 #}{\cf21 include} {\cf5\i <iostream>}{\cf21 \par
}{\cf21 #}{\cf21 include} {\cf5\i <algorithm>}{\cf21 \par
}{\cf21 #}{\cf21 include} {\cf5\i <random>}{\cf21 \par
}{\cf21 #}{\cf21 include} {\cf5\i <chrono>}{\cf21 \par
}{\cf21 #}{\cf21 include} {\cf5\i "cuda_ptr.cuh"}{\cf21 \par
}\par
{\cf8\b __global__} {\cf18 void} {\cf19 make_hist}({\cf8\b const} {\cf18 int}{\cf4 *} val,\par
                          {\cf18 double}{\cf4 *} bin,\par
                          {\cf8\b const} {\cf18 int} val_size) \{\par
  {\cf8\b const} {\cf8\b auto} tid {\cf4 =} {\cf8 threadIdx}.x {\cf4 +} {\cf8 blockIdx}.x {\cf4 *} {\cf8 blockDim}.x;\par
  {\cf8\b if} (tid {\cf4 <} val_size) \{\par
    {\cf8\b const} {\cf8\b auto} dst {\cf4 =} val[tid];\par
    atomicAdd({\cf4 &}bin[dst], {\cf4 1.0});\par
  \}\par
\}\par
\par
{\cf18 void} {\cf19 reference}({\cf8\b const} std{\cf4 :}{\cf4 :}vector{\cf4 <}{\cf18 int}{\cf4 >}{\cf4 &} val,\par
               std{\cf4 :}{\cf4 :}vector{\cf4 <}{\cf18 double}{\cf4 >}{\cf4 &} bin) \{\par
  {\cf8\b for} ({\cf8\b const} {\cf8\b auto} {\cf6 v} : val) \{\par
    bin[v] {\cf4 +}{\cf4 =} {\cf4 1.0};\par
  \}\par
\}\par
\par
{\cf18 void} {\cf19 check}({\cf8\b const} std{\cf4 :}{\cf4 :}vector{\cf4 <}{\cf18 double}{\cf4 >}{\cf4 &} bin_ref,\par
           {\cf8\b const} cuda_ptr{\cf4 <}{\cf18 double}{\cf4 >}{\cf4 &} bin) \{\par
  {\cf8\b const} {\cf8\b auto} size {\cf4 =} bin_ref.size();\par
  {\cf8\b for} ({\cf18 size_t} i {\cf4 =} {\cf4 0}; i {\cf4 <} size; i{\cf4 +}{\cf4 +}) \{\par
    {\cf8\b if} (bin_ref[i] {\cf4 !}{\cf4 =} bin[i]) \{\par
      std{\cf4 :}{\cf4 :}cout {\cf4 <}{\cf4 <} {\cf2 "}{\cf2 mismatch}{\cf10\b \\n}{\cf2 "};\par
      std{\cf4 :}{\cf4 :}cout {\cf4 <}{\cf4 <} bin_ref[i] {\cf4 <}{\cf4 <} {\cf2 "}{\cf2  }{\cf2 "} {\cf4 <}{\cf4 <} bin[i] {\cf4 <}{\cf4 <} std{\cf4 :}{\cf4 :}endl;\par
      std{\cf4 :}{\cf4 :}exit({\cf4 1});\par
    \}\par
  \}\par
\}\par
\par
{\cf21 #}{\cf21 define BENCH(repr)                                                     \\}{\cf21 \par
}{\cf21   do \{                                                                  \\}{\cf21 \par
}{\cf21     const auto beg = std::chrono::system_clock::now();                  \\}{\cf21 \par
}{\cf21     repr;                                                               \\}{\cf21 \par
}{\cf21     const auto end = std::chrono::system_clock::now();                  \\}{\cf21 \par
}{\cf21     std::cerr <<                                                        \\}{\cf21 \par
}{\cf21       #repr << " " <<                                                   \\}{\cf21 \par
}{\cf21       std::chrono::duration_cast<std::chrono::microseconds>(end - beg).count() << \\}{\cf21 \par
}{\cf21       " [microsec]\\n";                                                  \\}{\cf21 \par
}{\cf21   \} while(0)}{\cf21 \par
}\par
{\cf21 #}{\cf21 define BENCH_CUDA(repr, gl_size, tb_size, ...)                         \\}{\cf21 \par
}{\cf21   do \{                                                                  \\}{\cf21 \par
}{\cf21     const auto beg = std::chrono::system_clock::now();                  \\}{\cf21 \par
}{\cf21     repr<<<gl_size, tb_size>>>(__VA_ARGS__) ;                           \\}{\cf21 \par
}{\cf21     checkCudaErrors(cudaDeviceSynchronize());                           \\}{\cf21 \par
}{\cf21     const auto end = std::chrono::system_clock::now();                  \\}{\cf21 \par
}{\cf21     std::cerr <<                                                        \\}{\cf21 \par
}{\cf21       #repr << " " <<                                                   \\}{\cf21 \par
}{\cf21       std::chrono::duration_cast<std::chrono::microseconds>(end - beg).count() << \\}{\cf21 \par
}{\cf21       " [microsec]\\n";                                                  \\}{\cf21 \par
}{\cf21   \} while(0)}{\cf21 \par
}\par
{\cf18 int} {\cf19 main}({\cf8\b const} {\cf18 int} argc, {\cf8\b const} {\cf18 char}{\cf4 *} argv[]) \{\par
  {\cf18 int} val_size {\cf4 =} {\cf4 10000000};\par
  {\cf8\b const} {\cf18 int} bin_size {\cf4 =} {\cf4 1000};\par
  {\cf8\b if} (argc {\cf4 =}{\cf4 =} {\cf4 2}) \{\par
    val_size {\cf4 =} std{\cf4 :}{\cf4 :}atoi(argv[{\cf4 1}]);\par
    std{\cf4 :}{\cf4 :}cout {\cf4 <}{\cf4 <} {\cf2 "}{\cf2 array size is set to }{\cf2 "} {\cf4 <}{\cf4 <} val_size {\cf4 <}{\cf4 <} std{\cf4 :}{\cf4 :}endl;\par
  \} {\cf8\b else} \{\par
    std{\cf4 :}{\cf4 :}cout {\cf4 <}{\cf4 <} {\cf2 "}{\cf2 array size is default }{\cf2 "} {\cf4 <}{\cf4 <} val_size {\cf4 <}{\cf4 <} std{\cf4 :}{\cf4 :}endl;\par
  \}\par
\par
  cuda_ptr{\cf4 <}{\cf18 int}{\cf4 >} val;\par
  cuda_ptr{\cf4 <}{\cf18 double}{\cf4 >} bin;\par
\par
  val.allocate(val_size);\par
  bin.allocate(bin_size);\par
\par
  std{\cf4 :}{\cf4 :}mt19937 mt;\par
  std{\cf4 :}{\cf4 :}uniform_int_distribution{\cf4 <}{\cf4 >} uid({\cf4 0}, bin_size {\cf4 -} {\cf4 1});\par
  std{\cf4 :}{\cf4 :}generate_n({\cf4 &}val[{\cf4 0}], val_size, [{\cf4 &}mt, {\cf4 &}uid]()\{{\cf8\b return} uid(mt);\});\par
  std{\cf4 :}{\cf4 :}fill_n({\cf4 &}bin[{\cf4 0}], bin_size, {\cf4 0.0});\par
\par
  val.host2dev();\par
  bin.host2dev();\par
\par
  std{\cf4 :}{\cf4 :}vector{\cf4 <}{\cf18 int}{\cf4 >} val_ref(val_size);\par
  std{\cf4 :}{\cf4 :}vector{\cf4 <}{\cf18 double}{\cf4 >} bin_ref(bin_size);\par
\par
  std{\cf4 :}{\cf4 :}copy_n({\cf4 &}val[{\cf4 0}], val_size, val_ref.begin());\par
  BENCH(reference(val_ref, bin_ref));\par
\par
  {\cf8\b const} {\cf8\b auto} tb_size {\cf4 =} {\cf4 128};\par
  {\cf8\b const} {\cf8\b auto} gl_size {\cf4 =} (val_size {\cf4 -} {\cf4 1}) {\cf4 /} tb_size {\cf4 +} {\cf4 1};\par
  BENCH_CUDA(make_hist, gl_size, tb_size, val, bin, val_size);\par
\par
  bin.dev2host();\par
  check(bin_ref, bin);\par
\}\par
}